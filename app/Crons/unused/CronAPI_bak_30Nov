<?php
require_once('IConstants.inc'); 
require_once($ConstantsArray['dbServerUrl'] . "Utils/CPCBService.php");
require($ConstantsArray['dbServerUrl'] . "DataStoreMgr//LocationDataStore.php");
require_once($ConstantsArray['dbServerUrl'] . "Utils/CPCBService.php");
require_once($ConstantsArray['dbServerUrl'] . "DataStoreMgr/ConfigurationDataStore.php");
$LDS = LocationDataStore::getInstance();
$FDS = FolderDataStore::getInstance();
$bhoomiLocations = "19,38,44,50,52,54,55,56,60,64,65,66,69,70,71,72,20,75,73,74,76,77,78,98,117,130,138,80,116,115,131,151";
$eliveLocations = "15,12,18,16"; //elive stations
$eliveLocations .= ",22,24,25,26,27,28,29,30,31,32,34,36,45,46,47,53"; //FLOW EXTRA PARAM ,46 - Status 0 //ezone stations

//    $bhoomiLocations = "19,60";
 //   $eliveLocations = "16";

       
//Ezone Stations
//Stopped Station --  33
$vendorLocations = array("elive"=>$eliveLocations,"Bhoomi"=>$bhoomiLocations);
$cc = ConfigurationDataStore::getInstance();
$errMessage = "";
$COUNT = 3;
$delayLocations = array(19,52);
$cpcbSerive = CPCBService::getInstance();
foreach($vendorLocations as $vendorKey=>$value){
    try{
        	$locations = $LDS->FindBySeqs($value);
			foreach($locations as $location){
	            $locationSeq = $location->getSeq();
	            $vendorCode = $vendorKey;
	            $counter = 1;
	            if(in_array($locationSeq, $delayLocations)){
	            	$counter = $COUNT;
	            }
	            for($i=0;$i<$counter;$i++){
	            	$cpcbSerive =   CPCBService::getInstance();
	            	$detail = $cpcbSerive->getCPCBJson($locationSeq,$vendorCode);
	            	$data = $detail["data"];
	            	$hasPendingCpcbData = $detail["hasPendingCpcbData"];
	            	if(empty($data)){
	            		foreach ($hasPendingCpcbData as $key=>$value){
	            			$hasPending = $hasPendingCpcbData[$key];
	            			$FDS->updateHasPendingCpcbData($hasPending, $key);
	            			echo("<br>\r\n Updated haspending flag as $hasPending for station seq ". $key. "<br>");
	            		}
	            		//echo("No new data found for location ". $location->getLocationName() . "<br>\r\n");
	            		continue;
	            	}
	            	$data = json_encode($data);
	            	//echo("<br>Request :- ".$data);
	            	$ch = curl_init();
	            	$url = "http://182.75.69.206:8080/v1.0/industry/". $locationSeq ."/data";
	            	echo("<br> \r\n URL :- " . $url . "<br>");
	            	$apiKey = $cc->getCPCBApiKey($vendorCode);
	            	//echo($vendorCode ." - " .$apiKey . "<br>\r\n");
	            	
	            	$auth_header = 'Authorization: Basic ' . base64_encode($apiKey);
	            	curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/Json', $auth_header));
	            	curl_setopt($ch, CURLOPT_POST, TRUE);
	            	curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
	            	curl_setopt($ch, CURLOPT_URL, $url);
	            	curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
	            	$result = curl_exec($ch);
	            	//echo("result :-" . $result);
	            	if(!empty(curl_error($ch))){
	            		echo 'error:' . curl_error($ch);
	            	}
	            	$resultJson = json_decode($result);
	            	$msg = $resultJson->msg;
	            	$status = $resultJson->status;
	            	curl_close($ch);
	            	//echo($result);
	            	$hasError = false;
	            	if($status == 1 && $msg == "success"){
	            		$lastSyncedDates = $detail["lastsynceddates"];
	            		foreach ($lastSyncedDates as $key=>$value){
	            			$FDS->updateLastSyncedSeq($value, $key);
	            			echo("<br>\r\n Updated ". $location->getLocationName() ." with seq ". $value . "<br>");
	            		}
	            	}else{
	            		$locationName = $location->getLocationName();
	            		$request = "Location Name :- ".$locationName . "<br>";
	            		$request .= "<br>Request :- ".$data . "<br>";
	            		$response = "<br>Response :- ".$result . "<br>";
	            		$message = $request . $response;
	            		$subject = "Error During Send data to CPCB for location :- " . $locationSeq;
	            		$errMessage .= $message;
	            		$hasError = true;
	            		
	            	}
	            	if(!$hasError){
		            	foreach ($hasPendingCpcbData as $key=>$value){
		            		$hasPending = $hasPendingCpcbData[$key];
		            		$FDS->updateHasPendingCpcbData($hasPending, $key);
		            		echo("<br>\r\n Updated haspending flag as $hasPending for station seq ". $key. "<br>");
		            	}
	            	}
	            }    
       	 }        
    }catch(Exception $e){    	
    	echo("<br>\r\n Error occured Cron API :- ". $e->getMessage());
        MailerUtils::sendError($e->getMessage(), $subject,false);
    }
    
}
    if($errMessage != ""){
        MailerUtils::sendError($errMessage, "Error During Send data to CPCB",false);
    }
?>
